q
build_config
q
build_config
q
build_config = JSON.parse(params[:"build-config-json"] || "{}").merge(
  {
    IMAGE_TAG: params[:tag],
    IMAGE_TAG_ALT: params[:tag_alt],
    ENVIRONMENT: params[:env]
  }
)
params[:"build-config-json"]
params
params[:build_config_json]
params[:build_config]params[:build_config_json]
q
build_config
config_payload
c
build_config
q
params
q
params
q
params
q
params
q
params[:token]
params
q
params
c
JSON.parse(err.response.body)["message"]
err
q
err
q
n
y
q
err.response.body
err
q
puts caller()
caller()
call()
call
err
err.class
err
err.response
JSON.parse(err.response.body)
JSON.parse(err.response.body)["message"]
err
c
JSON.parse(response.body).class
JSON.parse(response.body)
response.body
n
q
default_headers
q
headers
q
config_payload
continue
x["build"][0]["dockerfile"]
x["build"][0]["targets"]
x["build"][0]
x["build"]
x=YAML.load(File.read("#{config_payload.build_path}/build.yaml"))
x["build"]
x=YAML.load(File.read("#{config_payload.build_path}/build.yaml")).class
x
x["build"]
x=YAML.load(File.read("#{config_payload.build_path}/build.yaml")).class
x[0]
x=YAML.load(File.read("#{config_payload.build_path}/build.yaml")).class
YAML.load(File.read("#{config_payload.build_path}/build.yaml")).class
YAML.load(File.read("#{config_payload.build_path}/build.yaml"))
q
YAML.load(File.read("#{config_payload.project_path}/build.yaml"))
c
continue
z.read
x.read
z = Zlib::GzipReader.new(StringIO.new(body))
body
z = Zlib::GzipReader.new(body)
      z = Zlib::GzipReader.new(body)
      unzipped = StringIO.new(z.read)
body
c
q
body
c
q
body.size
body
c
q
JSON.parse(err.response.body)["code"]
JSON.parse(err.response.body)
JSON.parse(err.response.body)["codigo"] 
JSON.parse(err.response.body)["codigo"] + ""
JSON.parse(err.response.body)["code"] + ""
JSON.parse(err.response.body)["message"]
TypeError.kind_of?(RuntimeError)
JSON.parse('{}')
JSON.parse({})
JSON.parse("")
JSON.parse(nil)
JSON.parse(err.response.body)["message"]
JSON.parse(err.response.body)
::JSON.parse(err.response.body)
require 'json'
::JSON.parse(err.response.body)
JSON.parse(err.response.body)
JSON(err.response.body)
err.response.body
err.response
c
q
response
c
q
ARGV[0]
ARGV[1]
continue
y
q
config_payload.project_path
File.expand_path(config_payload.project_path)
q
config_payload.project_path
config_payload
q
c
q
current_scope&.config.nil?
context
current_scope
q
default
context.config
context
current_scope
c
q
config_payload.get_value(key: 'RAILS_RUN_MIGRATES', default: 'false')
q
config_payload.get_value(key: 'ENVIRONMENT')
config_payload.get_value(key: :ENVIRONMENT)
config_payload.get_value(:ENVIRONMENTconfig_payload.get_value(key: :ENVIRONMENT))
config_payload.get_value(:ENVIRONMENT)
q
container[:env]
c
container[:env]
c
container[:env]
c
container[:env]
c
container[:env]
c
container[:env]
c
container[:env]
c
container[:env]
q
continue
q
container[:env]
c
container[:env]
byebug
q
container[:env]
c
container[:env]
c
container[:env]
c
container[:env]
q
continue
config_payload.context.config.ENV
config_payload.context.config.env
config_payload.context.config
container[:env][0]config_payload.context.config
container[:env]
c
container[:env]
c
container[:env]
c
container[:env]
container[:name]
container
config_payload.current_scope.config
q
config_payload.current_scope.config
config_payload.current_scope.name
config_payload.current_scope
c
config_payload.current_scope.config
c
config_payload.current_scope.config
c
config_payload.current_scope.config
c
config_payload.current_scope.config
c
config_payload.current_scope.config
c
config_payload.current_scope.config
c
config_payload.current_scope.config
c
config_payload.current_scope.config
c
config_payload.current_scope.config
q
config_payload.current_scope.config
current_context
current_scope
config_payload
container
container["type"]
container[:type]
c
container[:type]
container["config"]
c
container["config"]
c
container["config"]
c
container["config"]
c
container["config"]
c
container["config"]
q
container["config"]
c
container["config"]
c
container["config"]
c
container["config"]
